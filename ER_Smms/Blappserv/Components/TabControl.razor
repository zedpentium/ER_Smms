@using ER_Smms.Blappserv.Components

@*<div>This is a TabControl</div>*@

<CascadingValue Value="this">
    <div class="btn-group" role="group">
        @foreach (TabPage tabPage in Pages)
        {
        <button type="button" class="btn @GetButtonClass(tabPage)"
        @onclick=@( () => ActivatePage(tabPage) )> @tabPage.Text
        </button>
        }
    </div>
    @ChildContent
</CascadingValue>


@code {

    // Next line is needed so we are able to add <TabPage> components inside
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public TabPage ActivePage { get; set; }

    List<TabPage> Pages = new List<TabPage>();

    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);

        if (Pages.Count == 1)
        { ActivePage = tabPage; }

        StateHasChanged();
    }

    string GetButtonClass(TabPage page)
    { return page == ActivePage ? "btn-primary" : "btn-secondary"; }

    void ActivatePage(TabPage page)
    { ActivePage = page; }

}


@*<CascadingValue Value="this">
    <div class="tabs">
        <div class="tab-container">
            <div class="tab-filling tab-filling-left">
                @((MarkupString)TextFilling1)
            </div>
            @foreach (Tab tabPage in Pages)
            {
                <div class="tab @GetTabCSS(tabPage)" @onclick=@( () => ActivatePage(tabPage) )>
                    @tabPage.Text
                </div>
            }
            <div class="tab-filling tab-filling-right">
                @((MarkupString)TextFilling2)
            </div>
        </div>
        <div class="tab-content">
            @ChildContent
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter] public string TextFilling1 { get; set; }
    [Parameter] public string TextFilling2 { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public EventCallback<Tab> OnTabChanged { get; set; }

    public Tab ActivePage { get; set; }
    List<Tab> Pages = new List<Tab>();

    internal void AddPage(Tab tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;

        StateHasChanged();
    }

    string GetTabCSS(Tab page)
    {
        if (!page.Enabled)
            return "tab-disabled";

        return page == ActivePage ? "tab-active" : "";
    }

    void ActivatePage(Tab page)
    {
        if (page.Enabled)
        {
            ActivePage = page;
            OnTabChanged.InvokeAsync(page);
        }
    }
}*@